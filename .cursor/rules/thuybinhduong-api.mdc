---
description: 
globs: 
alwaysApply: false
---
# ThuYBinhDuong Veterinary Clinic API - Development Guide

## Project Overview
This is a **Veterinary Clinic Management System** API built with ASP.NET Core 9.0 and Entity Framework Core. The system manages appointments, customers, pets, doctors, services, and other clinic operations.

### Key Files
- **Entry Point**: [Program.cs](mdc:Program.cs) - Main application configuration and startup
- **Database Context**: [Models/ThuybinhduongContext.cs](mdc:Models/ThuybinhduongContext.cs) - EF Core DbContext with all entity configurations
- **Project Configuration**: [ThuYBinhDuongAPI.csproj](mdc:ThuYBinhDuongAPI.csproj) - Dependencies and project settings

## Domain Models

### Core Entities
The system manages these key entities:

- **[Customer](mdc:Models/Customer.cs)** - Clinic customers who own pets
- **[Pet](mdc:Models/Pet.cs)** - Animals being treated (species, breed, medical history)
- **[Doctor](mdc:Models/Doctor.cs)** - Veterinarians with specializations and experience
- **[Appointment](mdc:Models/Appointment.cs)** - Scheduled visits linking customers, pets, doctors, and services
- **[Service](mdc:Models/Service.cs)** - Medical/care services offered
- **[ServiceCategory](mdc:Models/ServiceCategory.cs)** - Service groupings
- **[User](mdc:Models/User.cs)** - System users with authentication
- **[Role](mdc:Models/Role.cs)** - User access control
- **[Feedback](mdc:Models/Feedback.cs)** - Customer reviews for appointments
- **[News](mdc:Models/News.cs)** - Clinic announcements and articles

### Entity Relationships
- Customer ←→ Pet (One-to-Many)
- Customer ←→ User (Many-to-One) 
- Pet ←→ Appointment (One-to-Many)
- Doctor ←→ Appointment (One-to-Many)
- Service ←→ Appointment (One-to-Many)
- Appointment ←→ Feedback (One-to-Many)

## Development Guidelines

### Project Structure
```
Controllers/     - API controllers (create here)
Data/           - Data access layer, repositories, DTOs
Models/         - EF Core entities (database-first)
Program.cs      - Application configuration
```

### API Development Standards

#### Controller Conventions
- Use `[ApiController]` and `[Route("api/[controller]")]` attributes
- Follow RESTful patterns: GET, POST, PUT, DELETE
- Use proper HTTP status codes (200, 201, 400, 404, 500)
- Implement async/await patterns with `Task<ActionResult<T>>`

#### Entity Framework Patterns
- Inject `ThuybinhduongContext` into controllers
- Use async methods: `ToListAsync()`, `FirstOrDefaultAsync()`, `SaveChangesAsync()`
- Include related entities with `.Include()` when needed
- Handle concurrency with `SaveChangesAsync()` try-catch blocks

#### Data Transfer Objects (DTOs)
- Create DTOs in `Data/` folder to avoid over-posting
- Use separate DTOs for Create, Update, and Read operations
- Map between entities and DTOs (consider AutoMapper)

### Code Style & Best Practices

#### Naming Conventions
- PascalCase for classes, methods, properties: `AppointmentController`, `GetAppointment()`
- camelCase for local variables: `appointmentDto`, `customerId`
- Use meaningful names: `GetAppointmentsByCustomerId()` not `GetAppts()`

#### Error Handling
```csharp
try
{
    await _context.SaveChangesAsync();
    return Ok(result);
}
catch (DbUpdateConcurrencyException)
{
    return Conflict("Resource was modified by another user");
}
catch (Exception ex)
{
    return StatusCode(500, "Internal server error");
}
```

#### Validation
- Use Data Annotations: `[Required]`, `[StringLength]`, `[Range]`
- Validate ModelState: `if (!ModelState.IsValid) return BadRequest(ModelState);`
- Custom validation for business rules

### Database Connection
- Connection string is currently hardcoded in OnConfiguring (⚠️ **SECURITY RISK**)
- **TODO**: Move to appsettings.json and use `builder.Services.AddDbContext<>()`
- Database: SQL Server (`THUYBINHDUONG` database on localhost)

### API Endpoints to Implement

#### Appointments
- `GET /api/appointments` - List all appointments
- `GET /api/appointments/{id}` - Get specific appointment
- `POST /api/appointments` - Create new appointment
- `PUT /api/appointments/{id}` - Update appointment
- `DELETE /api/appointments/{id}` - Cancel appointment
- `GET /api/appointments/customer/{customerId}` - Customer's appointments
- `GET /api/appointments/doctor/{doctorId}` - Doctor's schedule

#### Customers & Pets
- `GET /api/customers` - List customers
- `GET /api/customers/{id}/pets` - Customer's pets
- `POST /api/pets` - Register new pet
- `PUT /api/pets/{id}` - Update pet information

#### Services & Doctors
- `GET /api/services` - Available services
- `GET /api/doctors` - Available doctors
- `GET /api/doctors/{id}/availability` - Doctor availability

### Security Considerations
- **URGENT**: Remove hardcoded connection string from [Models/ThuybinhduongContext.cs](mdc:Models/ThuybinhduongContext.cs)
- Implement authentication/authorization using User and Role entities
- Add input validation and sanitization
- Use HTTPS in production (already configured with `UseHttpsRedirection()`)

### Testing Strategy
- Unit tests for business logic
- Integration tests for API endpoints
- Test database interactions with in-memory provider
- Mock external dependencies

### Deployment Notes
- Target Framework: .NET 9.0
- Database: SQL Server with Entity Framework Core
- Configuration: Move sensitive settings to appsettings.json
- Health checks for database connectivity
