---
description: 
globs: 
alwaysApply: false
---
# ThuYBinhDuong Veterinary Clinic API - Development Rules

## Project Overview
This is a .NET 9.0 Web API for a Vietnamese veterinary clinic management system. The API handles user authentication, customer management, pet records, appointments, and medical histories.

## Project Architecture

### Entry Point & Configuration
- **Main entry:** [Program.cs](mdc:Program.cs) - Contains all service registrations, JWT configuration, Swagger setup, and middleware pipeline
- **Database Context:** [Models/ThuybinhduongContext.cs](mdc:Models/ThuybinhduongContext.cs) - Entity Framework Core DbContext with all entity configurations

### Core Components Structure

#### 1. Controllers (`Controllers/`)
- **Authentication:** [Controllers/UserController.cs](mdc:Controllers/UserController.cs) - Handles registration, login, logout, user management
- **Authorization:** [Controllers/AuthorizeRoleAttribute.cs](mdc:Controllers/AuthorizeRoleAttribute.cs) - Custom role-based authorization attribute

#### 2. Data Transfer Objects (`Data/Dtos/`)
- **Authentication DTOs:** [Data/Dtos/LoginDto.cs](mdc:Data/Dtos/LoginDto.cs), [Data/Dtos/RegisterDto.cs](mdc:Data/Dtos/RegisterDto.cs), [Data/Dtos/UserResponseDto.cs](mdc:Data/Dtos/UserResponseDto.cs)
- **Pattern:** All DTOs use DataAnnotations for validation with Vietnamese error messages

#### 3. Models (`Models/`)
- **Core Entities:** [Models/User.cs](mdc:Models/User.cs), [Models/Customer.cs](mdc:Models/Customer.cs), [Models/Pet.cs](mdc:Models/Pet.cs)
- **Supporting Entities:** [Models/Appointment.cs](mdc:Models/Appointment.cs), [Models/Doctor.cs](mdc:Models/Doctor.cs), [Models/MedicalHistory.cs](mdc:Models/MedicalHistory.cs), [Models/Service.cs](mdc:Models/Service.cs), [Models/Feedback.cs](mdc:Models/Feedback.cs), [Models/News.cs](mdc:Models/News.cs)

#### 4. Services (`Services/`)
- **JWT Service:** [Services/IJwtService.cs](mdc:Services/IJwtService.cs), [Services/JwtService.cs](mdc:Services/JwtService.cs) - Token generation and validation

## Coding Conventions & Patterns

### 1. API Controller Standards
- All controllers inherit from `ControllerBase` and use `[ApiController]` attribute
- Route pattern: `[Route("api/[controller]")]`
- Use dependency injection for `DbContext`, services, and `ILogger`
- Vietnamese XML documentation comments for all public methods
- Consistent error handling with try-catch blocks and proper HTTP status codes

### 2. Authentication & Authorization
- JWT Bearer token authentication configured in [Program.cs](mdc:Program.cs)
- Role-based authorization using custom `[AuthorizeRole(params int[] roles)]` attribute
- **Roles**: 0=Customer (Khách hàng), 1=Administrator (Quản trị viên)
- Password hashing using SHA256 (seen in UserController)
- Claims include UserId, Username, and Role

### 3. DTO Pattern Implementation
- Separate DTOs for Create, Update, and Response operations
- Use DataAnnotations for validation with Vietnamese error messages
- Example: `[Required(ErrorMessage = "Tên đăng nhập là bắt buộc")]`
- Response DTOs exclude sensitive data (like passwords)
- Include pagination support in list endpoints

### 4. Database & Entity Framework
- Entity Framework Core with SQL Server
- Database-first approach (models generated from existing database)
- Entities use snake_case column names mapped to PascalCase properties
- Navigation properties properly configured with foreign key relationships
- Use async/await for all database operations

### 5. Error Handling Standards
- Consistent error response format: `{ message: "Vietnamese error message" }`
- Use appropriate HTTP status codes:
  - 400 BadRequest for validation errors
  - 401 Unauthorized for authentication failures
  - 403 Forbidden for authorization failures
  - 404 NotFound for missing resources
  - 500 InternalServerError for unexpected errors
- Log errors with ILogger before returning error responses

### 6. API Documentation
- Swagger/OpenAPI configured with JWT Bearer authentication
- Vietnamese API documentation and descriptions
- Contact information: info@thuybinhduong.com
- Development-only Swagger UI at `/swagger`

## Development Guidelines

### 1. Adding New Controllers
1. Inherit from `ControllerBase` with `[ApiController]` and `[Route("api/[controller]")]`
2. Inject required dependencies (DbContext, services, ILogger)
3. Add XML documentation comments in Vietnamese
4. Implement proper error handling and logging
5. Use appropriate authorization attributes
6. Follow the established DTO pattern

### 2. Adding New DTOs
1. Place in appropriate subfolder under `Data/Dtos/`
2. Use DataAnnotations for validation
3. Include Vietnamese error messages
4. Follow naming conventions: CreateXDto, UpdateXDto, XResponseDto

### 3. Adding New Services
1. Create interface in `Services/` folder
2. Register service in [Program.cs](mdc:Program.cs) DI container
3. Follow existing patterns from [Services/IJwtService.cs](mdc:Services/IJwtService.cs)

### 4. Database Changes
1. Update [Models/ThuybinhduongContext.cs](mdc:Models/ThuybinhduongContext.cs) if needed
2. Ensure proper entity relationships and configurations
3. Use migrations for schema changes

### 5. Security Considerations
- Never expose sensitive data in API responses
- Use HTTPS redirection (configured in Program.cs)
- Validate all input data using DTOs and ModelState
- Use role-based authorization consistently
- Hash passwords properly (current implementation uses SHA256)

## Configuration Files
- **App Settings:** [appsettings.json](mdc:appsettings.json), [appsettings.Development.json](mdc:appsettings.Development.json)
- **Project File:** [ThuYBinhDuongAPI.csproj](mdc:ThuYBinhDuongAPI.csproj)
- **Launch Settings:** [Properties/launchSettings.json](mdc:Properties/launchSettings.json)

## Current API Endpoints Status

### Implemented Endpoints
- **UserController**: Authentication, registration, profile management, admin user operations
  - POST /api/user/login ✅
  - POST /api/user/register ✅
  - GET /api/user/profile ✅
  - GET /api/user/profile/{id} ✅ (Admin only)
  - GET /api/user/list ✅ (Admin only)
  - PUT /api/user/update-role/{userId} ✅ (Admin only)

### Endpoints to Implement/Enhance

#### Pet Management (Admin)
- **PetController admin routes**: Need to add admin-specific endpoints
  - GET /api/pet/admin - List all pets with customer info
  - GET /api/pet/admin/search - Search pets by name, species, customer
  - POST /api/pet/admin - Create pet for any customer
  - PUT /api/pet/admin/{id} - Update any pet
  - DELETE /api/pet/admin/{id} - Delete any pet

#### Appointment Management (Admin)
- **AppointmentController admin routes**: Need admin management endpoints
  - GET /api/appointment/admin - List all appointments
  - POST /api/appointment/admin - Create appointment for any customer
  - PUT /api/appointment/admin/{id} - Update any appointment
  - PATCH /api/appointment/admin/{id}/status - Update appointment status
  - DELETE /api/appointment/admin/{id} - Cancel/delete appointment

#### News Management (Admin)
- **NewsController admin routes**: Need admin content management
  - POST /api/news/admin - Create news/events
  - PUT /api/news/admin/{id} - Update news content
  - DELETE /api/news/admin/{id} - Delete news
  - PATCH /api/news/admin/{id}/status - Publish/unpublish

#### Service Management (Admin)
- **ServiceController admin routes**: Need admin service management
  - POST /api/service/admin - Create new service
  - PUT /api/service/admin/{id} - Update service details
  - DELETE /api/service/admin/{id} - Delete service
  - PUT /api/service/admin/{id}/price - Update pricing

#### Doctor Management (Admin)
- **DoctorController admin routes**: Need complete doctor management
  - GET /api/doctor/admin - List all doctors
  - POST /api/doctor/admin - Create doctor profile
  - PUT /api/doctor/admin/{id} - Update doctor info
  - DELETE /api/doctor/admin/{id} - Remove doctor
  - PUT /api/doctor/admin/{id}/schedule - Manage availability

#### Customer Management (Admin)
- **CustomerController**: Need new controller for customer management
  - GET /api/customer/admin - List all customers
  - GET /api/customer/admin/search - Search customers
  - POST /api/customer/admin - Create customer account
  - PUT /api/customer/admin/{id} - Update customer info
  - DELETE /api/customer/admin/{id} - Soft delete customer
  - GET /api/customer/admin/{id}/stats - Customer statistics

## Vietnamese Language Support
- All user-facing messages and error responses are in Vietnamese
- API documentation and comments use Vietnamese
- Business logic reflects Vietnamese veterinary clinic operations
- Ensure proper UTF-8 encoding for Vietnamese characters

This API serves a Vietnamese veterinary clinic, so all business logic, error messages, and documentation should maintain Vietnamese language support and cultural context.

## Business Rules & Requirements

### User Roles & Permissions
- **Role 0 - Customer (Khách hàng)**: Can manage own profile, pets, appointments, view services and news
- **Role 1 - Administrator (Quản trị viên)**: Full system access and management capabilities including:
  - User authentication and management
  - Pet records management for all customers
  - Appointment scheduling and status management
  - News and events content management
  - Service catalog management
  - Doctor management
  - Customer management

### Appointment Status Rules
- **Status 0**: Chờ xác nhận (Pending) - Customer can cancel
- **Status 1**: Đã xác nhận (Confirmed) - Only admin can modify
- **Status 2**: Hoàn thành (Completed) - Cannot be modified
- **Status 3**: Đã hủy (Cancelled) - Cannot be modified

### Customer Features (Role 0) - Priority Implementation

#### 1. Registration & Authentication
- **Registration**: Must create both User and Customer records
  - User table: username, password, email, phone_number, role=0, created_at
  - Customer table: customer_name, address, gender, user_id (foreign key)
  - Both records created in single transaction
- **Login**: Username and password authentication with JWT token response

#### 2. Pet Management (Customer can manage own pets only)
- **View pets**: GET /api/pets - List customer's pets only
- **Add pet**: POST /api/pets - Create new pet for logged-in customer
- **Update pet**: PUT /api/pets/{id} - Only if pet belongs to customer
- **Delete pet**: DELETE /api/pets/{id} - Only if pet belongs to customer
- **Authorization**: Use customer_id from JWT claims to filter pets

#### 3. Appointment Management
- **Create appointment**: POST /api/appointments
  - Customer can create appointments for their pets
  - Default status = 0 (Chờ xác nhận)
  - Include pet_id, service_id, appointment_date, appointment_time, notes
- **View appointments**: GET /api/appointments - Customer's appointments only
- **Cancel appointment**: DELETE /api/appointments/{id}
  - Only allowed if status = 0 (Chờ xác nhận)
  - Changes status to 3 (Đã hủy)
- **Authorization**: Filter by customer_id from JWT claims

#### 4. Information Services (Public/Customer accessible)
- **View news**: GET /api/news - List news/events with search functionality
  - Implement search by title, content, or tags
  - Support pagination
- **View services**: GET /api/services - List available services with search
  - Search by service name or description
  - Can be reused for admin role
  - Include service categories if needed

### Data Relationships for Customer Features
- Customer ← User (customer.user_id = user.user_id)
- Pet ← Customer (pet.customer_id = customer.customer_id)
- Appointment ← Pet (appointment.pet_id = pet.pet_id)
- Appointment ← Service (appointment.service_id = service.service_id)

### Administrator Features (Role 1) - Complete System Management

#### 1. Authentication & User Management
- **Login**: POST /api/user/login - Admin authentication with JWT token
- **Profile management**: Standard user profile operations
- **Token validation**: GET /api/user/validate-token - Verify admin token validity

#### 2. Pet Records Management (Admin manages all pets)
- **View all pets**: GET /api/pets/admin - List all pets from all customers with pagination
- **Search pets**: GET /api/pets/admin/search?query={term} - Search by pet name, species, customer name
- **View pet details**: GET /api/pets/admin/{id} - View specific pet details with owner info
- **Add pet**: POST /api/pets/admin - Create pet for any customer
- **Update pet**: PUT /api/pets/admin/{id} - Update any pet record
- **Delete pet**: DELETE /api/pets/admin/{id} - Remove pet record
- **Filter by customer**: GET /api/pets/admin?customerId={id} - View pets by specific customer

#### 3. Appointment Management (Admin controls all appointments)
- **View all appointments**: GET /api/appointments/admin - List all appointments with pagination
- **Search appointments**: GET /api/appointments/admin/search?query={term} - Search by customer, pet, service
- **View appointment details**: GET /api/appointments/admin/{id} - Full appointment details
- **Create appointment**: POST /api/appointments/admin - Schedule appointment for any customer
- **Update appointment**: PUT /api/appointments/admin/{id} - Modify appointment details
- **Update status**: PATCH /api/appointments/admin/{id}/status - Change appointment status (0-3)
- **Delete appointment**: DELETE /api/appointments/admin/{id} - Remove appointment
- **Filter by status**: GET /api/appointments/admin?status={status} - Filter by appointment status
- **Filter by date**: GET /api/appointments/admin?date={date} - Filter by appointment date

#### 4. News & Events Management
- **View all news**: GET /api/news/admin - List all news with pagination and search
- **Search news**: GET /api/news/admin/search?query={term} - Search by title, content, tags
- **View news details**: GET /api/news/admin/{id} - View specific news item
- **Create news**: POST /api/news/admin - Add new news/event
- **Update news**: PUT /api/news/admin/{id} - Edit news content
- **Delete news**: DELETE /api/news/admin/{id} - Remove news item
- **Publish/unpublish**: PATCH /api/news/admin/{id}/status - Control news visibility

#### 5. Service Management
- **View all services**: GET /api/services/admin - List all services with pagination
- **Search services**: GET /api/services/admin/search?query={term} - Search by name, description
- **View service details**: GET /api/services/admin/{id} - View specific service
- **Create service**: POST /api/services/admin - Add new service
- **Update service**: PUT /api/services/admin/{id} - Edit service details
- **Delete service**: DELETE /api/services/admin/{id} - Remove service
- **Manage pricing**: PUT /api/services/admin/{id}/price - Update service pricing

#### 6. Doctor Management
- **View all doctors**: GET /api/doctors/admin - List all doctors with pagination
- **Search doctors**: GET /api/doctors/admin/search?query={term} - Search by name, specialization
- **View doctor details**: GET /api/doctors/admin/{id} - View doctor profile and schedule
- **Create doctor**: POST /api/doctors/admin - Add new doctor
- **Update doctor**: PUT /api/doctors/admin/{id} - Edit doctor information
- **Delete doctor**: DELETE /api/doctors/admin/{id} - Remove doctor record
- **Manage schedule**: PUT /api/doctors/admin/{id}/schedule - Update doctor availability

#### 7. Customer Management
- **View all customers**: GET /api/customers/admin - List all customers with pagination
- **Search customers**: GET /api/customers/admin/search?query={term} - Search by name, email, phone
- **View customer details**: GET /api/customers/admin/{id} - View customer profile and pets
- **Create customer**: POST /api/customers/admin - Add new customer (with User record)
- **Update customer**: PUT /api/customers/admin/{id} - Edit customer information
- **Delete customer**: DELETE /api/customers/admin/{id} - Remove customer (soft delete)
- **Customer statistics**: GET /api/customers/admin/{id}/stats - View customer appointment/pet history

### Authorization Implementation for Admin Features
- All admin endpoints must use `[AuthorizeRole(1)]` attribute
- Validate admin role in JWT claims before allowing access
- Admin can access and modify all data regardless of ownership
- Implement proper logging for admin actions
- Return comprehensive data including related entity information

### Implementation Priority
1. **First**: Complete User/Customer registration with proper foreign key relationships
2. **Second**: Pet management endpoints with customer authorization
3. **Third**: Appointment creation and cancellation with status rules
4. **Fourth**: News and Services viewing with search functionality
5. **Fifth**: Admin authentication and user management
6. **Sixth**: Admin pet management with full CRUD operations
7. **Seventh**: Admin appointment management with status control
8. **Eighth**: Admin news/events and services management
9. **Ninth**: Doctor and customer management for admin

### Security for Customer Features
- Always validate that customer can only access their own data
- Use JWT claims to get customer_id for data filtering
- Implement proper authorization checks in all endpoints
- Validate appointment cancellation rules (only status 0 can be cancelled)

### Security for Admin Features
- Admin role (Role=1) required for all admin endpoints
- Log all admin actions for audit trail
- Validate admin permissions before data modification
- Return appropriate error messages for unauthorized access
- Implement rate limiting for admin operations if needed
