---
description: 
globs: 
alwaysApply: false
---
# Rule: Viết Comments và Labels bằng Tiếng Việt

## Mô tả
Yêu cầu AI luôn sử dụng tiếng Việt cho tất cả comments, mô tả code, và labels trong source code.

## Áp dụng cho
- Tất cả file C# (*.cs) trong project
- Đặc biệt quan trọng cho hệ thống quản lý phòng khám thú y ThuYBinhDuong

## Quy tắc bắt buộc

### 1. Comments
- **Tất cả comments** (inline và block) phải viết bằng tiếng Việt
- Sử dụng thuật ngữ y học thú y phù hợp khi có thể
- Comments phải rõ ràng và dễ hiểu cho đội ngũ phát triển Việt Nam

### 2. Labels và Messages
- **Error messages**: Phải sử dụng tiếng Việt
- **Validation messages**: Phải sử dụng tiếng Việt  
- **Log messages**: Phải sử dụng tiếng Việt
- **Display text**: Phải sử dụng tiếng Việt

### 3. Tên biến và method
- **Method names**: Có thể dùng tiếng Anh hoặc tiếng Việt
- **Variable names**: Có thể dùng tiếng Anh hoặc tiếng Việt
- **Mô tả và comments**: Luôn luôn bằng tiếng Việt

## Ví dụ chuẩn

### Controller Example
```csharp
[ApiController]
[Route("api/[controller]")]
public class AppointmentController : ControllerBase
{
    private readonly ThuybinhduongContext _context;

    public AppointmentController(ThuybinhduongContext context)
    {
        _context = context;
    }

    /// <summary>
    /// Lấy danh sách tất cả các cuộc hẹn
    /// </summary>
    [HttpGet]
    public async Task<ActionResult<IEnumerable<Appointment>>> GetAppointments()
    {
        try
        {
            // Lấy danh sách cuộc hẹn với thông tin liên quan
            var appointments = await _context.Appointments
                .Include(a => a.Customer)    // Bao gồm thông tin khách hàng
                .Include(a => a.Pet)         // Bao gồm thông tin thú cưng
                .Include(a => a.Doctor)      // Bao gồm thông tin bác sĩ
                .Include(a => a.Service)     // Bao gồm thông tin dịch vụ
                .OrderBy(a => a.AppointmentDate)
                .ToListAsync();

            return Ok(appointments);
        }
        catch (Exception ex)
        {
            // Ghi log lỗi khi không thể lấy danh sách cuộc hẹn
            return StatusCode(500, "Không thể lấy danh sách cuộc hẹn");
        }
    }

    /// <summary>
    /// Tạo cuộc hẹn mới cho thú cưng
    /// </summary>
    [HttpPost]
    public async Task<ActionResult<Appointment>> CreateAppointment(CreateAppointmentDto dto)
    {
        // Kiểm tra tính hợp lệ của dữ liệu đầu vào
        if (!ModelState.IsValid)
        {
            return BadRequest("Dữ liệu không hợp lệ");
        }

        // Kiểm tra thú cưng có tồn tại không
        var pet = await _context.Pets.FindAsync(dto.PetId);
        if (pet == null)
        {
            return NotFound("Thú cưng không tồn tại trong hệ thống");
        }

        // Kiểm tra bác sĩ có khả dụng không
        var doctor = await _context.Doctors.FindAsync(dto.DoctorId);
        if (doctor == null)
        {
            return NotFound("Bác sĩ không tồn tại trong hệ thống");
        }

        try
        {
            // Tạo cuộc hẹn mới
            var appointment = new Appointment
            {
                CustomerId = dto.CustomerId,
                PetId = dto.PetId,
                DoctorId = dto.DoctorId,
                ServiceId = dto.ServiceId,
                AppointmentDate = dto.AppointmentDate,
                AppointmentTime = dto.AppointmentTime,
                Notes = dto.Notes,
                Status = 0, // Trạng thái chờ xác nhận
                CreatedAt = DateTime.Now
            };

            _context.Appointments.Add(appointment);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetAppointment), 
                new { id = appointment.AppointmentId }, 
                "Tạo cuộc hẹn thành công");
        }
        catch (Exception ex)
        {
            // Ghi log lỗi khi không thể tạo cuộc hẹn
            return StatusCode(500, "Không thể tạo cuộc hẹn. Vui lòng thử lại sau");
        }
    }
}
```

### Validation Example
```csharp
public class CreateAppointmentDto
{
    [Required(ErrorMessage = "Mã khách hàng là bắt buộc")]
    public int CustomerId { get; set; }
    
    [Required(ErrorMessage = "Mã thú cưng là bắt buộc")]
    public int PetId { get; set; }
    
    [Required(ErrorMessage = "Mã bác sĩ là bắt buộc")]
    public int DoctorId { get; set; }
    
    [Required(ErrorMessage = "Ngày hẹn là bắt buộc")]
    [DataType(DataType.Date, ErrorMessage = "Định dạng ngày không hợp lệ")]
    public DateOnly AppointmentDate { get; set; }
    
    [Required(ErrorMessage = "Giờ hẹn là bắt buộc")]
    [StringLength(50, ErrorMessage = "Giờ hẹn không được vượt quá 50 ký tự")]
    public string AppointmentTime { get; set; } = null!;
    
    [StringLength(500, ErrorMessage = "Ghi chú không được vượt quá 500 ký tự")]
    public string? Notes { get; set; }
}
```

## Thuật ngữ chuyên ngành thú y

### Từ vựng thường dùng
- **Thú cưng / Vật nuôi**: Pet
- **Bác sĩ thú y**: Veterinarian/Doctor
- **Khách hàng**: Customer
- **Cuộc hẹn / Lịch hẹn**: Appointment
- **Dịch vụ**: Service
- **Khám tổng quát**: General checkup
- **Tiêm phòng**: Vaccination
- **Phẫu thuật**: Surgery
- **Chăm sóc răng miệng**: Dental care
- **Siêu âm**: Ultrasound
- **Xét nghiệm**: Laboratory test
- **Bệnh sử**: Medical history
- **Triệu chứng**: Symptoms
- **Chẩn đoán**: Diagnosis
- **Điều trị**: Treatment
- **Thuốc**: Medicine/Medication
- **Tái khám**: Follow-up visit

### Trạng thái cuộc hẹn
- **Chờ xác nhận**: Pending confirmation
- **Đã xác nhận**: Confirmed
- **Đang thực hiện**: In progress
- **Hoàn thành**: Completed
- **Đã hủy**: Cancelled
- **Không đến**: No-show

## Lưu ý quan trọng
- Luôn ưu tiên sử dụng thuật ngữ y học chính xác
- Comments phải mô tả rõ ràng logic xử lý
- Error messages phải thân thiện và dễ hiểu với người dùng cuối
- Đảm bảo tính nhất quán trong cách sử dụng thuật ngữ trong toàn bộ dự án
