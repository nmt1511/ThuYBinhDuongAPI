---
description: 
globs: 
alwaysApply: false
---
# API Development Patterns & Examples

## Controller Template

### Basic Controller Structure
```csharp
[ApiController]
[Route("api/[controller]")]
public class AppointmentsController : ControllerBase
{
    private readonly ThuybinhduongContext _context;

    public AppointmentsController(ThuybinhduongContext context)
    {
        _context = context;
    }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<Appointment>>> GetAppointments()
    {
        return await _context.Appointments
            .Include(a => a.Customer)
            .Include(a => a.Pet)
            .Include(a => a.Doctor)
            .Include(a => a.Service)
            .ToListAsync();
    }
}
```

## Common EF Core Patterns

### Querying with Relationships
```csharp
// Get appointments with all related data
var appointments = await _context.Appointments
    .Include(a => a.Customer)
    .Include(a => a.Pet)
    .Include(a => a.Doctor)
    .Include(a => a.Service)
    .Where(a => a.AppointmentDate >= DateTime.Today)
    .OrderBy(a => a.AppointmentDate)
    .ThenBy(a => a.AppointmentTime)
    .ToListAsync();
```

### Create Operations
```csharp
[HttpPost]
public async Task<ActionResult<Appointment>> PostAppointment(CreateAppointmentDto dto)
{
    if (!ModelState.IsValid)
        return BadRequest(ModelState);

    var appointment = new Appointment
    {
        CustomerId = dto.CustomerId,
        PetId = dto.PetId,
        DoctorId = dto.DoctorId,
        ServiceId = dto.ServiceId,
        AppointmentDate = dto.AppointmentDate,
        AppointmentTime = dto.AppointmentTime,
        Notes = dto.Notes,
        Status = 0, // Pending
        CreatedAt = DateTime.Now
    };

    _context.Appointments.Add(appointment);
    await _context.SaveChangesAsync();

    return CreatedAtAction(nameof(GetAppointment), 
        new { id = appointment.AppointmentId }, appointment);
}
```

### Update Operations
```csharp
[HttpPut("{id}")]
public async Task<IActionResult> PutAppointment(int id, UpdateAppointmentDto dto)
{
    var appointment = await _context.Appointments.FindAsync(id);
    if (appointment == null)
        return NotFound();

    appointment.AppointmentDate = dto.AppointmentDate;
    appointment.AppointmentTime = dto.AppointmentTime;
    appointment.Notes = dto.Notes;
    appointment.Status = dto.Status;

    try
    {
        await _context.SaveChangesAsync();
    }
    catch (DbUpdateConcurrencyException)
    {
        if (!AppointmentExists(id))
            return NotFound();
        else
            throw;
    }

    return NoContent();
}
```

## DTO Examples

### Create DTOs in Data/Dtos/
```csharp
// Data/Dtos/CreateAppointmentDto.cs
public class CreateAppointmentDto
{
    [Required]
    public int CustomerId { get; set; }
    
    [Required]
    public int PetId { get; set; }
    
    [Required]
    public int DoctorId { get; set; }
    
    [Required]
    public int ServiceId { get; set; }
    
    [Required]
    public DateOnly AppointmentDate { get; set; }
    
    [Required]
    [StringLength(50)]
    public string AppointmentTime { get; set; } = null!;
    
    public string? Notes { get; set; }
    
    public int? Age { get; set; }
    public double? Weight { get; set; }
    public bool IsNewPet { get; set; } = false;
}
```

## Service Registration in Program.cs

### Database Context Setup
```csharp
// Add this to Program.cs after var builder = WebApplication.CreateBuilder(args);
builder.Services.AddDbContext<ThuybinhduongContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

// Add controllers
builder.Services.AddControllers();
```

### Configuration in appsettings.json
```json
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=localhost;Database=THUYBINHDUONG;Trusted_Connection=True;Encrypt=False;"
  }
}
```

## Error Handling Patterns

### Global Exception Handler
```csharp
// Add to Program.cs
app.UseExceptionHandler("/error");

app.Map("/error", (HttpContext context) =>
{
    var exception = context.Features.Get<IExceptionHandlerFeature>()?.Error;
    return Results.Problem(
        title: "An error occurred",
        detail: exception?.Message,
        statusCode: 500);
});
```

### Controller-Level Error Handling
```csharp
[HttpGet("{id}")]
public async Task<ActionResult<Appointment>> GetAppointment(int id)
{
    try
    {
        var appointment = await _context.Appointments
            .Include(a => a.Customer)
            .Include(a => a.Pet)
            .Include(a => a.Doctor)
            .Include(a => a.Service)
            .FirstOrDefaultAsync(a => a.AppointmentId == id);

        if (appointment == null)
            return NotFound($"Appointment with ID {id} not found");

        return appointment;
    }
    catch (Exception ex)
    {
        // Log the exception
        return StatusCode(500, "An error occurred while retrieving the appointment");
    }
}
```

## Validation Patterns

### Model Validation
```csharp
public class CreatePetDto
{
    [Required]
    [StringLength(255, MinimumLength = 1)]
    public string Name { get; set; } = null!;

    [StringLength(100)]
    public string? Species { get; set; }

    [StringLength(100)]
    public string? Breed { get; set; }

    [DataType(DataType.Date)]
    public DateOnly? BirthDate { get; set; }

    public bool IsVaccinated { get; set; } = false;

    [Url]
    public string? ImageUrl { get; set; }
}
```

### Custom Validation
```csharp
// Custom validation for appointment scheduling
public class ValidAppointmentDateAttribute : ValidationAttribute
{
    public override bool IsValid(object? value)
    {
        if (value is DateOnly date)
        {
            return date >= DateOnly.FromDateTime(DateTime.Today);
        }
        return false;
    }

    public override string FormatErrorMessage(string name)
    {
        return "Appointment date must be today or in the future";
    }
}
```

## Logging Patterns

### Controller Logging
```csharp
public class AppointmentsController : ControllerBase
{
    private readonly ThuybinhduongContext _context;
    private readonly ILogger<AppointmentsController> _logger;

    public AppointmentsController(
        ThuybinhduongContext context, 
        ILogger<AppointmentsController> logger)
    {
        _context = context;
        _logger = logger;
    }

    [HttpPost]
    public async Task<ActionResult<Appointment>> PostAppointment(CreateAppointmentDto dto)
    {
        _logger.LogInformation("Creating appointment for customer {CustomerId}", dto.CustomerId);
        
        try
        {
            // ... appointment creation logic
            
            _logger.LogInformation("Successfully created appointment {AppointmentId}", appointment.AppointmentId);
            return CreatedAtAction(nameof(GetAppointment), 
                new { id = appointment.AppointmentId }, appointment);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creating appointment for customer {CustomerId}", dto.CustomerId);
            return StatusCode(500, "An error occurred while creating the appointment");
        }
    }
}
```
